<div>
  {% if publisher.exists() %}
    <p>
      <xsl:text>Published by: </xsl:text>
      <b>
        {% if contact.where(name.empty()).telecom.where(system='url' or system='email').exists() %}
          {% for aTelecom in aContact.telecom.where(system='url' and system='email').first().value %}
            {% if aTelecom.system = 'email' %}
              <a href="mailto:{{aTelecom.value}}">
                {{publisher}}
              </a>
            {% else %}
              <a href="{{aTelecom.value}}">
                {{publisher}}
              </a>
            {% endif %}
          {% endfor %}
        {% else %}
          {{publisher}}
        {% endif %}
      </b>
      {% if contact.where(name.empty()).telecom.exclude(%resource.contact.telecom.where(system='url' or system='email').first()) %}
        (
          {% for otherTelecom in contact.where(name.exists()).telecom.exclude(%resource.contact.telecom.where(system='url' or system='email').first()) %}
            {% if otherTelecom.system.exists() %}
              {{otherTelecom.system}}:
            {% endif %}
            {{otherTelecom.value}}{% if forloop.last == false %}, {% endif %}
          {% endfor %}
        )
      {% endif %}
    </p>
  {% endif %}
  {% if contact.where(name.exists()) %}
    <p>Contact Details:</p>
    <ul>
      {% for aContact in contact.where(name.exists()) }}
        <li>
          {% if aContact.telecom.where(system='url' and system='email') %}
            {% for aTelecom in aContact.telecom.where(system='url' and system='email').first().value %}
              {% if aTelecom.system = 'email' %}
                <a href="mailto:{{aTelecom.value}}">
                  {{aContact.name}}
                </a>
              {% else %}
                <a href="{{aTelecom.value}}">
                  {{aContact.name}}
                </a>
              {% endif %}
            {% endfor %}
          {% else %}
            {{aContact.name}}
          {% endif %}
          {% if aContact.telecom.exclude(aContact.telecom.where(system='url' or system='email').first()) %}
            (
              {% for otherContact in aContact.telecom.exclude(aContact.telecom.where(system='url' or system='email').first()) %}
                {% if otherContact.system.exists() %}
                  {{otherContact.system}}:
                {% endif %}
                {{otherContact.value}}{% if forloop.last == false %}, {% endif %}
              {% endfor %}
            )
          {% endif %}
        </li>
      {% endfor %}
    </ul>
  {% endif %}
  <xsl:copy-of select="fn:handleMarkdownLines(description/@value)"/>
  
  <xsl:for-each select="requirements">
    <p>
      <b>Requirements:</b>
    </p>
    <xsl:copy-of select="fn:handleMarkdownLines(@value)"/>
  </xsl:for-each>
  <xsl:for-each select="copyright">
    <p>
      <b>Copyright:</b>
    </p>
    <xsl:copy-of select="fn:handleMarkdownLines(@value)"/>
  </xsl:for-each>
  <xsl:for-each select="software">
    <p>
      <xsl:variable name="parts" as="xs:string+">
        <xsl:value-of select="concat('Applies to software: ', name/@value)"/>
        <xsl:for-each select="version/@value">
          <xsl:value-of select="concat('version: ', .)"/>
        </xsl:for-each>
        <xsl:value-of select="date/@value"/>
      </xsl:variable>
      <xsl:value-of select="string-join($parts, ' ')"/>
    </p>
  </xsl:for-each>
  <xsl:for-each select="implementation">
    <p>
      <xsl:value-of select="concat('Implementation: ', url/@value)"/>
    </p>
    <xsl:copy-of select="fn:handleMarkdownLines(description/@value)"/>
  </xsl:for-each>
  <xsl:if test="fhirVersion/@value|acceptUnknown/@value|format/@value|profile/@value">
    <h2>General</h2>
    <div class="table-wrapper">
      <table class="grid">
        <tbody>
          <tr>
            <th>FHIR Version:</th>
            <td>
              <xsl:value-of select="string-join(fhirVersion/@value, ', ')"/>
            </td>
          </tr>
          <xsl:for-each select="acceptunknown/@value">
            <tr>
              <th>Accepts elements from future versions:</th>
              <td>
                <xsl:value-of select="."/>
              </td>
            </tr>
          </xsl:for-each>
          <xsl:if test="format/@value">
            <tr>
              <th>Supported formats:</th>
              <td>
                <xsl:value-of select="string-join(format/@value, ', ')"/>
              </td>
            </tr>
          </xsl:if>
          <xsl:if test="profile/@value">
            <tr>
              <th>Supported profiles:</th>
              <td>
                <xsl:for-each select="profile/@value">
                  <p>
                    <a href="{.}">
                      <xsl:value-of select="."/>
                    </a>
                  </p>
                </xsl:for-each>
              </td>
            </tr>
          </xsl:if>
        </tbody>
      </table>
    </div>
  </xsl:if>
  <xsl:for-each select="rest">
    <h2>
      <xsl:value-of select="concat('REST ', mode/@value, ' behavior')"/>
    </h2>
    <xsl:copy-of select="fn:handleMarkdownLines(documentation/@value)"/>
    <xsl:for-each select="security">
      <p>
        <b>Security:</b>
      </p>
      <xsl:if test="service/coding/code">
        <xsl:value-of select="string-join(service/coding/code/@value, ', ')"/>
        <br/>
      </xsl:if>
      <xsl:for-each select="description/@value">
        <xsl:copy-of select="fn:handleMarkdownLines(.)"/>
      </xsl:for-each>
    </xsl:for-each>
    <xsl:if test="resource">
      <h3>Resource summary</h3>
      <div class="table-wrapper">              
        <table class="grid">
        <thead>
          <tr>
            <th>Resource</th>
            <th>Search</th>
            <th>Read</th>
            <th>Read Version</th>
            <th>Instance History</th>
            <th>Resource History</th>
            <th>Create</th>
            <th>Update</th>
            <th>Delete</th>
            <th>Operations</th>
          </tr>
        </thead>
        <tbody>
          <xsl:for-each select="resource">
            <tr>
              <th>
                <xsl:value-of select="type/@value"/>
                <xsl:for-each select="profile/reference/@value|profile/@value">
                  <xsl:text> (</xsl:text>
                    <a href="{.}">Profile</a>
                  <xsl:text>)</xsl:text>
                </xsl:for-each>
              </th>
              <td>
                <xsl:for-each select="interaction[code/@value='search-type']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='read']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
                <xsl:for-each select="conditionalRead/@value">
                  <br/>(conditional read:<br/>
                  <xsl:value-of select="concat(., ')')"/>
                </xsl:for-each>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='vread']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
                <xsl:if test="readHistory/@value=false()">(current only)</xsl:if>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='history-instance']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='history-type']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='create']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
                <xsl:if test="conditionalCreate/@value='true'">(conditional supported)</xsl:if>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='update']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
                <xsl:if test="updateCreate/@value='false'">(existing only)</xsl:if>
                <xsl:if test="conditionalUpdate/@value='true'">(conditional supported)</xsl:if>
              </td>
              <td>
                <xsl:for-each select="interaction[code/@value='delete']">
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
                <xsl:if test="conditionalDelete/@value='true'">(conditional supported)</xsl:if>
              </td>
              <td>
                <xsl:for-each select="operation">
                  <xsl:if test="position()!=1">
                    <br/>
                  </xsl:if>
                  <xsl:value-of select="concat('$', name/@value, ': ')"/>
                  <xsl:call-template name="doCapabilityStatement"/>
                </xsl:for-each>
              </td>
            </tr>
          </xsl:for-each>
        </tbody>
      </table>
      </div>
    </xsl:if>
    <xsl:if test="operation">
      <p>
        <b>Operations:</b>
      </p>
      <ul>
        <xsl:for-each select="operation">
          <li>
            <a href="{lower-case(definition/reference/@value)}{lower-case(definition/@value)}">
              <xsl:value-of select="concat('$', name/@value)"/>
            </a>
            <xsl:for-each select="definition/display/@value">
              <xsl:value-of select="concat(' - ', .)"/>
            </xsl:for-each>
            <xsl:for-each select="extension[@url=$expectation-extension]/valueCode/@value">
              <i>
                <xsl:value-of select="concat(' ', .)"/>
              </i>
            </xsl:for-each>
          </li>
        </xsl:for-each>
      </ul>
    </xsl:if>
    <xsl:if test="interaction">
      <xsl:variable name="doCapabilityStatement" as="xs:boolean" select="exists(interaction/extension[@url=$expectation-extension]/valueCode/@value)"/>
      <h3>General interactions</h3>
      <div class="table-wrapper">
        <table class="list">
        <thead>
          <tr>
            <th>Name</th>
            <xsl:if test="$doCapabilityStatement">
              <th>Capability Statement</th>
            </xsl:if>
            <th>Description</th>
          </tr>
        </thead>
        <tbody>
          <xsl:apply-templates select="interaction">
            <xsl:with-param name="doCapabilityStatement" select="$doCapabilityStatement"/>
          </xsl:apply-templates>
        </tbody>
      </table>
      </div>
    </xsl:if>
    <xsl:for-each select="resource">
      <br/>
      <br/>
      <h3>
        <a href="{$fhirpath}{lower-case(type/@value)}.html">
          <xsl:value-of select="type/@value"/>
        </a>              
      </h3>
      <xsl:for-each select="profile/@value">
        <p>
          <xsl:text>Profile: </xsl:text>
          <a href="{.}">
            <xsl:value-of select="."/>
          </a>
        </p>
      </xsl:for-each>
      <xsl:if test="supportedProfile">
        <p>Supported Profile(s):</p>
        <ul>
          <xsl:for-each select="supportedProfile">
            <li>
              <a href="{@value}">
                <xsl:value-of select="@value"/>
              </a>
              <xsl:for-each select="extension[@url='http://hl7.org/fhir/StructureDefinition/capabilitystatement-expectation']">
                <xsl:value-of select="concat(' ', valueCode/@value)"/>
              </xsl:for-each>
            </li>
          </xsl:for-each>
        </ul>
      </xsl:if>
      <xsl:variable name="behavior" as="element()*">
        <xsl:for-each select="versioning/@value">
          <p>
            <xsl:value-of select="concat('Versioning support: ', .)"/>
          </p>
        </xsl:for-each>
        <xsl:for-each select="referencePolicy/@value">
          <p>
            <xsl:value-of select="concat('Reference policy: ', .)"/>
          </p>
        </xsl:for-each>
      </xsl:variable>
      <xsl:if test="$behavior">
        <h4>Behavior</h4>
        <xsl:copy-of select="$behavior"/>
      </xsl:if>              
      <!-- Note: description doesn't exist yet -->
      <xsl:copy-of select="fn:handleMarkdownLines(description/@value)"/>
      <h4>Interactions</h4>
      <div class="table-wrapper">
        <table class="list">
          <xsl:variable name="doCapabilityStatement" as="xs:boolean" select="exists(interaction/extension[@url=$expectation-extension]/valueCode/@value)"/>
          <thead>
            <tr>
              <th>Name</th>
              <xsl:if test="$doCapabilityStatement">
                <th>Conformance</th>
              </xsl:if>
              <th>Description</th>
            </tr>
          </thead>
          <tbody>
            <xsl:apply-templates select="interaction[documentation]">
              <xsl:with-param name="doCapabilityStatement" select="$doCapabilityStatement"/>
            </xsl:apply-templates>
            <xsl:apply-templates select="operation[documentation]">
              <xsl:with-param name="doCapabilityStatement" select="$doCapabilityStatement"/>
            </xsl:apply-templates>
          </tbody>
        </table>
      </div>
      <xsl:if test="searchInclude or searchParam">
        <h4>Search</h4>
        <xsl:if test="searchInclude">
          <p>
            <xsl:text>Supported Includes: </xsl:text>
            <xsl:value-of select="string-join(searchInclude/@value, ' ')"/>
          </p>
        </xsl:if>
        <xsl:if test="searchParam">
          <xsl:call-template name="doParams"/>
        </xsl:if>
      </xsl:if>
    </xsl:for-each>
  </xsl:for-each>
  <xsl:for-each select="messaging">
    <br/>
    <br/>
    <h2>Messaging</h2>
    <xsl:if test="endpoint">
      <p>
        <b>End point(s): </b>
      </p>
      <div class="table-wrapper">
        <table cellpadding="grid">
          <tbody>
            <tr>
              <th>Address</th>
              <th>Protocol(s)</th>
            </tr>
            <xsl:for-each select="endpoint">
              <tr>
                <td>
                  <xsl:value-of select="address/@value"/>
                </td>
                <td>
                  <xsl:for-each select="protocol">
                    <xsl:if test="position()!=1">, </xsl:if>
                    <xsl:value-of select="if (display) then display/@value else code/@value"/>
                  </xsl:for-each>
                </td>
              </tr>
            </xsl:for-each>
          </tbody>
        </table>
      </div>
    </xsl:if>
    <xsl:copy-of select="fn:handleMarkdownLines(documentation/@value)"/>
    <div class="table-wrapper">
      <table class="grid">
        <thead>
          <tr>
            <th>Event</th>
            <th>Category</th>
            <th>Mode</th>
            <th>Focus</th>
            <th>Request</th>
            <th>Response</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <xsl:for-each select="event">
            <tr>
              <td>
                <xsl:value-of select="code/@value"/>
              </td>
              <td>
                <xsl:value-of select="category/@value"/>
              </td>
              <td>
                <xsl:value-of select="mode/@value"/>
              </td>
              <td>
                <xsl:value-of select="focus/@value"/>
              </td>
              <td>
                <xsl:for-each select="request/reference/@value">
                  <a href="{.}.html">
                    <xsl:value-of select="."/>
                  </a>
                </xsl:for-each>
              </td>
              <td>
                <xsl:for-each select="response/reference/@value">
                  <a href="{.}.html">
                    <xsl:value-of select="."/>
                  </a>
                </xsl:for-each>
              </td>
              <td>
                <xsl:copy-of select="fn:handleMarkdownLines(documentation/@value)"/>
              </td>
            </tr>
          </xsl:for-each>
        </tbody>
      </table>
    </div>
  </xsl:for-each>
  <xsl:if test="document">
    <br/>
    <br/>
    <h2>Documents</h2>
    <xsl:for-each select="rest/documentMailbox/@value">
      <xsl:value-of select="concat('Mailbox: ', .)"/>
    </xsl:for-each>
    <div class="table-wrapper">
      <table class="grid">
        <thead>
          <tr>
            <th>Mode</th>
            <th>Profile</th>
            <th>Notes</th>
          </tr>
        </thead>
        <tbody>
          <xsl:for-each select="document">
            <tr>
              <td>
                <xsl:value-of select="mode/@value"/>
              </td>
              <td>
                <xsl:for-each select="profile/@value">
                  <a href="{.}">
                    <xsl:value-of select="."/>
                  </a>
                </xsl:for-each>
              </td>
              <td>
                <xsl:copy-of select="fn:handleMarkdownLines(documentation/@value)"/>
              </td>
            </tr>
          </xsl:for-each>
        </tbody>
      </table>
    </div>
  </xsl:if>
</div>