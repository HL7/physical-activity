// TODO:
// 1. Make sure the queries are complete and correct
// 2. Make sure the queries are consistent in the Query definition and in the 'self' link
// 3. Make sure the URLs are correct for all POST and PUT operations (note that Subscription notifications go to the endpoint nominated in the Subscription, not the RESTful Subscription endpoint)
// 4. Make sure the patient and provider names, genders, ages, roles, etc. jive with what's in the scenarios.  (I fixed several places where they weren't, but I may have missed some)
// 5. Make sure we're declaring InstanceOf for the specific US Core, Physical Activity, Subscription Backport, etc. profile.  We shouldn't *ever* have an InstanceOf a plain resource
// 6. Look at the titles and descriptions for things and make sure they're a) right, and b) consistent within (and ideally across) scenarios
// 7. Change our dependency to be the new SDOH release (once it's actually published)

Instance: Scen2ProviderToPersonaltrainerReferral
InstanceOf: ExampleScenario
Title:       "Scenario 2 - Provider to Personal Trainer Post-Rehabilitation Referral"
Description: "A detailed scenario involving the referral of a patient from a healthcare provider to personal training services post-rehabilitation. The scenario includes subscription creation, task updates, and queries related to service request, patient health conditions, observations, and diagnostic reports."
Usage: #definition
* status = #draft
* version = "4.0.1"
* name = "ProviderToPersonalTrainerReferral"
* insert ActorEntity(ehr,      "EHR",              [[EHR that records patient's exercise plan]])
* insert ActorEntity(getFit,   "Get Fit Training", [['Light' service provider']])
* insert ActorEntity(Fit4Life, "Fit 4 Life",       [['Full' service provider']])
* insert ActorEntity(registry, "Service Registry", [[Registry of candidate service providers - outside the scope of this IG]])
* insert Instance_Empty(Scen2query1, Binary, "Query for personal trainers near Mrs. Johansson",  [[Search to retrieve list of Service Providers for personal trainers near Mrs. Johansson: `GET https://registry.example.org/fhir/PractitionerRole?role=228239008|http%3A//snomed.info/sct&location.near=37.8393|84.2700|20|[mi_us]&_include=PractitionerRole:practitioner`]])
* insert Instance_Empty(Scen2query2, Binary, "Query for Get Fit assigned referrals",             [[Query Task and associated ServiceRequest and Patient: `GET https://ehr.example.org/fhir/Task?status=requested&owner=Organization/Scen2OrgGetFitTraining&_include=Task:patient&_include=Task:focus`]])
* insert Instance_Empty(Scen2query3, Binary, "Query for Fit 4 Life assigned referrals",          [[Search to retrieve ServiceRequest and Patient: `GET https://ehr.example.org/fhir/ServiceRequest?_id=Scen2Servicerequest&_include=ServiceRequest:patient`]])
* insert Instance_Empty(Scen2query4, Binary, "Query for patient physical activity conditions",   [[Search to retrieve Conditions: `GET https://ehr.example.org/fhir/Condition?patient=Scen2PatientJohansson&category=http:%3A//hl7.org/fhir/us/physical-activity/CodeSystem/PATemporaryCodesorary-codes|PhysicalActivity`]])
* insert Instance_Empty(Scen2query5, Binary, "Query for patient physical activity observations", [[Search to retrieve Observations: `GET https://ehr.example.org/fhir/Observation?patient=Scen2PatientJohansson&category=http:%3A//hl7.org/fhir/us/physical-activity/CodeSystem/PATemporaryCodesorary-codes|PhysicalActivity`]])
* insert Instance_Empty(Scen2query6, Binary, "Query for EHR-assigned tasks",                     [[Search to retrieve Task: `GET https://fit4life.example.org/fhir/Task?_id=Scen2TaskFit4LifeV1`]])
* insert Instance_Empty(Scen2query7, Binary, "Query for report and referenced observations",     [[Search on referenced Observations: `GET https://fit4.life.example.org/fhir/DiagnosticReport?id=Scen2DiagnosticReport&_include=DiagnosticReport:result`]])
* insert Instance_Content(Scen2SubscriptionEhr,                       Subscription, "Subscription from EHR", [[Establishes the subscription for the EHR to monitor tasks it's created]])
* insert Instance_Content(Scen2SubscriptionGetFit,                    Subscription, "Subscription from Get Fit Training", [[Establishes the subscription for the service provider to monitor tasks created for it]])
* insert Instance_Content(Scen2PractitionerTrainerSearchsetBundle,    Bundle,       "Searchset Bundle returning list of personal trainers", [[In practice, the set of candidates would likely be longer.  Note that this functionality is outside the scope of this IG.]])
* insert InstanceContains(Scen2RoleWang, )
* insert InstanceContains(Scen2RoleMatthews, )
* insert InstanceContains(Scen2PractitionerWang, )
* insert InstanceContains(Scen2PractitionerMatthews, )
* insert Instance_Content(Scen2SubscriptionNotificationNewTaskBundle, Bundle,       "Subscription notification indicating new Task", [[Points to the initial 'requested' version of the Task]])
* insert Instance_Content(Scen2TaskGetFitResponseBundle,              Bundle,       "Search-set Bundle returning referenced Task",   [[Returns Task referenced in subscription notification.  Includes associated ServiceRequest and Patient]])
* insert InstanceContains(Scen2TaskGetFit, 1)
* insert Instance_Empty(Scen2TaskGetFit,   Task, "Task seeking GetFit to fulfill referral", [[This is the initial Task seeking fulfillment]])
* insert InstanceVersion(1, "Initial GetFit Task", Scen2TaskGetFitV1, [[Initial version of the referral fulfillment request for GetFit with a status of 'requested']])
* insert InstanceVersion(2, "Updated GetFit Task", Scen2TaskGetFitV2, [[Version of the referral fulfillment request for GetFit after it has been changed to 'rejected']])
* insert Instance_Empty(Scen2TaskFit4Life, Task, "Task seeking FitLife to fulfill referral", [[This is the second Task seeking fulfillment (after the first was rejected)]])
* insert InstanceVersion(1, "Initial Fit4Life Task",   Scen2TaskFit4LifeV1, [[Initial version of the referral fulfillment request for Fit4Life with a status of 'requested']])
* insert InstanceVersion(2, "Updated Fit4Life Task",   Scen2TaskFit4LifeV2, [[Version of the referral fulfillment request for GetFit after it has been changed to 'accepted']])
* insert InstanceVersion(3, "Completed Fit4Life Task", Scen2TaskFit4LifeV3, [[Version of the referral fulfillment request for GetFit after it has been changed to 'completed' and a link to the report added]])
* insert Instance_Content(Scen2ReferralFit4LifeResponseBundle,             Bundle, "ServiceRequest search response for Fit4Life", [[Search-set Bundle returning ServiceRequest and Patient]])
* insert InstanceContains(Scen2Servicerequest, )
* insert InstanceContains(Scen2PatientJohansson, )
* insert Instance_Content(Scen2TaskEHRResponseBundle1,                     Bundle, "Accepted Task search response for EHR", [[Search-set Bundle returning Task with id based on subscription notification]])
* insert InstanceContains(Scen2TaskFit4Life, 2)
* insert Instance_Content(Scen2TaskEHRResponseBundle2,                     Bundle, "Completed Task search response for EHR", [[Search-set Bundle returning Task with id based on subscription notification]])
* insert InstanceContains(Scen2TaskFit4Life, 3)
* insert Instance_Content(Scen2ConditionResponseBundle,                    Bundle, "Search-set Bundle returning conditions", )
* insert InstanceContains(Scen2Condition, )
* insert Instance_Content(Scen2ObservationResponseBundle,                  Bundle, "Search-set Bundle returning observations", )
* insert InstanceContains(Scen2ObsDaysPerWeek, Scen2ObsMinutesPerDay)
* insert Instance_Content(Scen2NotificationUpdatedTaskBundle,              Bundle, "Subscription Notification that Task has updated", )
* insert InstanceContains(Scen2TaskFit4Life, 2)
* insert Instance_Content(Scen2NotificationCompletedTaskBundle,            Bundle, "Subscription Notification that Task has completed", )
* insert InstanceContains(Scen2TaskFit4Life, 3)
* insert Instance_Content(Scen2DiagnosticReportObservationsResponseBundle, Bundle, "Search-set Bundle returning referenced observations", )
* insert InstanceContains(Scen2DiagnosticReport, )
* insert InstanceContains(Scen2ObsDaysPerWeek2, )
* insert InstanceContains(Scen2ObsMinutesPerDay2, )
* insert InstanceContains(Scen2ObsCalories, )
* insert InstanceContains(Scen2ObsActivityPeakHR, )
* process[+]
  * title = "Subscription Establishment"
  * preConditions = "EHR, Fit 4 Life, and Get Fit training have established legal and technical arrangements for interoperability"
  * postConditions = "Subscriptions are successfully created allowing EHR to monitor Fit4Life and GetFit to monitor EHR"
  * insert ProcessCreate(1, "Create service provider-monitoring Subscription", ehr,    Fit4Life, Scen2SubscriptionEhr, ,    [[EHR posts Subscription to Fit 4 Life to monitor Tasks. Request: `POST https://fit4life.example.org/fhir/Subscription`  Response: `201 Created`]])
  * insert ProcessCreate(2, "Create EHR-monitoring Subscription",              getFit, ehr,      Scen2SubscriptionGetFit, , [[Get Fit Training posts Subscription to EHR to monitor Tasks. Request: `POST https://ehr.example.org/fhir/Subscription`  Response: `201 Created`]])
* process[+]
  * title = "1 Hour after appointment"
  * preConditions = "EHR has completed the appointment with the patient"
  * postConditions = "EHR has retrieved list of personal trainers and notified GetFit of new Task"
  * insert ProcessSearch(3, "Retrieve service provider list",        ehr, registry, Scen2query1, Scen2PractitionerTrainerSearchsetBundle, [[Search to retrieve list of Service Providers for personal trainers near Mrs. Johansson.]])
  * insert ProcessCreate(4, "Subscription notification of new Task", ehr, getFit,   Scen2SubscriptionNotificationNewTaskBundle, ,         [[Service provider is notified of new Task via subscription. Request: `POST https://fit4life.example.org/fhir/Subscription`  Response: `201 Created`]])
* process[+]
  * title = "1 Day after appointment"
  * preConditions = "GetFit has received the notification of new Task"
  * postConditions = "GetFit has queried Task, associated ServiceRequest and Patient; and updated Task to refused"
  * insert ProcessSearch(5, "Getfit retrieves referral", getFit, ehr, Scen2query2, Scen2TaskGetFitResponseBundle, [[GetFit retrieves the referenced Task and its associated ServiceRequest and Patient.]])
  * insert ProcessUpdate(6, "GetFit refuses task",       getFit, ehr, Scen2TaskGetFit, 2,                         [[GetFit updates the Task status to 'refused' with a reason.  Request: `PUT https://todo.example.org/fhir/Task/todo` Response: `200 Ok`]])
* process[+]
  * title = "An Hour later"
  * preConditions  = "EHR has a Task seeking fulfillment of ServiceRequest for Fit4Life"
  * postConditions = "Fit4Life has retrieved ServiceRequest, Patient, Conditions, Observations, and updated Task"
  * insert ProcessCreate(7,  "Create Task on Fit4Life",       ehr,      Fit4Life, Scen2TaskFit4Life, 1,                             [[New Task is created directly on Fit4Life's server.  Request: `POST https://fit4life.example.org/fhir/Task` Response: `201 Created`]])
  * insert ProcessSearch(8,  "Fit4Life retrieves referral",   Fit4Life, ehr,      Scen2query3, Scen2ReferralFit4LifeResponseBundle, [[Fit4Life retrieves the ServiceRequest and Patient referenced by the Task.]])
  * insert ProcessSearch(9,  "Fit4Life retrieves conditions", Fit4Life, ehr,      Scen2query4, Scen2ConditionResponseBundle,        [[Fit4Life retrieves the physical-activity related Conditions associated with the patient.]])
  * insert ProcessSearch(10, "Fit4Life retrieves referral",   Fit4Life, ehr,      Scen2query5, Scen2ObservationResponseBundle,      [[Fit4Life retrieves the physical-activity related Observations associated with the patient.  (In practice there would typically be more than are shown here, and some might not be for profiles defined in this IG.)]])
  * insert ProcessCreate(11, "EHR gets referral acceptance",  Fit4Life, ehr,      Scen2NotificationUpdatedTaskBundle, ,             [[A subscription notification to the EHR is triggered when Fit4Life changes the prescription status to 'accepted'.  Request: `POST https://ehr.example.org/fhir/todo` Response: `200 Ok`]])
  * insert ProcessSearch(12, "EHR retrieves accepted Task",   ehr,      Fit4Life, Scen2query6, Scen2TaskEHRResponseBundle1,         [[EHR retrieves the Task referenced by the subscription notification]])
* process[+]
  * title = "2 Months Later"
  * preConditions = "Fit4Life has updated the Task"
  * postConditions = "EHR has retrieved the completed Task, DiagnosticReport, and associated Observations"
  * insert ProcessCreate(13, "EHR gets referral acceptance", Fit4Life, ehr,      Scen2NotificationCompletedTaskBundle, ,                       [[A subscription notification to the EHR is triggered when Fit4Life changes the prescription status to 'completed'.  Request: `POST https://ehr.example.org/fhir/todo` Response: `200 Ok`]])
  * insert ProcessSearch(14, "EHR retrieves completed Task", ehr,      Fit4Life, Scen2query6, Scen2TaskEHRResponseBundle2,                     [[EHR retrieves the Task referenced by the subscription notification]])
  * insert ProcessSearch(15, "EHR retrieves report",         ehr,      Fit4Life, Scen2query7, Scen2DiagnosticReportObservationsResponseBundle, [[EHR retrieves the Fit4Life DiagnosticReport using the id provided in the Task.  It also uses _include to retrieve referenced observations]])

Instance: Scen2SubscriptionEhr
InstanceOf: Subscription
Title:       "EHR Subscription for Task Monitoring"
Description:  "A subscription for Fit4Life organization to monitor task updates."
Usage: #example
* status = #requested
* criteria = "Task?owner=https://registry.example.com/fhir/Organization/Scen2OrgFit4Life"
* channel
  * type = #rest-hook
  * endpoint = "https://ehr.example.com/mySubscriptions"
  * payload = #application/fhir+json
* contact[+]
  * system = #phone
  * value = "123-456-7890"
  * use = #work
* contact[+]
  * system = #email
  * value = "ehr@example.com"
  * use = #work
* end = "2024-01-01T00:00:00Z"
* reason = "Monitoring tasks"

Instance: Scen2SubscriptionGetFit
InstanceOf: Subscription
Title:       "GetFit Subscription for Task Monitoring"
Description:  "A subscription for GetFit Training organization to monitor task updates."
Usage: #example
* status = #requested
* criteria = "Task?owner=https://ehr.example.com/Organization/Scen2OrgGetFitTraining"
* channel
  * type = #rest-hook
  * endpoint = "https://getFit.example.com/subscriptionNotifications"
  * payload = #application/fhir+json
* contact[+]
  * system = #phone
  * value = "987-654-3210"
  * use = #work
* contact[+]
  * system = #email
  * value = "getFit@example.com"
  * use = #work
* end = "2024-01-01T00:00:00Z"
* reason = "Monitoring task updates"


Instance: Scen2PractitionerTrainerSearchsetBundle
InstanceOf: Bundle
Title:       "Personal Trainers Searchset Bundle"
Description:  "Bundle representing the search results for personal trainers within the specified postcode."
Usage: #example
* insert SearchBundle(2, [[PractitionerRole?role=228239008|http%3A//snomed.info/sct&location.near=37.8393|84.2700|20|[mi_us]&_include=PractitionerRole:practitioner]])
* insert EntryMatch(PractitionerRole, Scen2RoleWang)
* insert EntryMatch(PractitionerRole, Scen2RoleMatthews)
* insert EntryInclude(Practitioner, Scen2PractitionerWang)
* insert EntryInclude(Practitioner, Scen2PractitionerMatthews)

// Referral workflow
Instance: Scen2Servicerequest
InstanceOf: ServiceRequest
Title:       "Service Request for Physical Activity Program"
Description:  "This ServiceRequest instance represents a physical activity request for patient Nancy Johansson"
Usage: #example
* insert ExerciseReferral(2023-03-16, 2023-06-16, Scen2PatientJohansson, "Nancy Johansson", Scen2RoleLopez, "Dr. Lopez", $sct#409063005, [[Counseling]])
* code.text = "Ms. Johansson suffered from a mild heart attack last fall.  She has made a full recovery.  However, her level of physical activity has significantly declined from that prior to her incident due to discomfort and concerns about triggering another event.  I have explained that this reduced level of activity has negative implications for her health.\n\nMs. Johnson has agreed that some 1-on-1 consultation with an exercise professional who can help her resume a level of physical activity that is safe and feels positive would be helpful.  Please meet with her and support her in this endeavor."

Instance: Scen2TaskGetFitV1
InstanceOf: Task
Title:       "Get Fit Training Task for Patient Johansson"
Description:  "Task instance represents a 'Fulfill' order task for patient Johansson."
Usage: #example
* insert FulfillTask(Scen2PatientJohansson, "Nancy Johansson", Scen2OrgGoodHealth, "Good Health Cardiology", Scen2OrgGetFitTraining, "Get Fit", Scen2Servicerequest, requested, 2023-03-15)

Instance: Scen2TaskGetFitV2
InstanceOf: Task
Title:       "Updated Get Fit Training Task for Patient Johansson"
Description:  "The updated Task instance shows the 'Fulfill' order task for patient Johansson has been refused. "
Usage: #example
* insert FulfillTask(Scen2PatientJohansson, "Nancy Johansson", Scen2OrgGoodHealth, "Good Health Cardiology", Scen2OrgGetFitTraining, "Get Fit", Scen2Servicerequest, rejected, 2023-03-15)
* statusReason.text = "Unavailable until 2 months later"

Instance: Scen2Parameters
InstanceOf: Parameters
Title:       "Subscription Notification Parameters for New Task"
Description:  "Parameters include the reference to the subscription, the type of notification, and the focus of the notification."
Usage: #example
* insert SubParameters(Scen2SubscriptionGetFit, Scen2TaskGetFitV1)

Instance: Scen2SubscriptionNotificationNewTaskBundle
InstanceOf: Bundle
Title:       "Notification Bundle for New Task at Get Fit Training"
Description:  "Bundle represents a subscription notification triggered by the creation of a new task."
Usage: #example
* insert SubNotification(Scen2Parameters, getFit, 12345)

Instance: Scen2TaskGetFitResponseBundle
InstanceOf: Bundle
Title:       "Task Query Response Bundle for Get Fit Training"
Description:  "Bundle represents a search response to a Task query made for tasks related to patient 'Johansson' and owned by 'Get Fit Training'."
Usage: #example
* insert SearchBundle(1, [[Task?status=requested&owner=Organization/Scen2OrgGetFitTraining&_include=Task:patient&_include=Task:focus]])
* insert EntryMatch(Task, Scen2TaskGetFitV1)
* insert EntryInclude(Patient, Scen2PatientJohansson)
* insert EntryInclude(ServiceRequest, Scen2Servicerequest)

Instance: Scen2TaskFit4LifeV1
InstanceOf: Task
Title:       "Task for Patient Johansson by Fit 4 Life"
Description: "Task instance represents a 'Fulfill' order task for patient Johansson."
Usage: #example
* insert FulfillTask(Scen2PatientJohansson, "Nancy Johansson", Scen2OrgGoodHealth, "Good Health Cardiology", Scen2OrgFit4Life, "Fit 4 Life", Scen2Servicerequest, requested, 2023-03-16)

Instance: Scen2TaskFit4LifeV2
InstanceOf: Task
Title:       "Updated Fit 4 Life Task for Patient Johansson"
Description: "This updated Task instance (version 2) represents an in-progress task for patient Nancy Johansson."
Usage: #example
* insert FulfillTask(Scen2PatientJohansson, "Nancy Johansson", Scen2OrgGoodHealth, "Good Health Cardiology", Scen2OrgFit4Life, "Fit 4 Life", Scen2Servicerequest, accepted, 2023-03-16)

Instance: Scen2TaskFit4LifeV3
InstanceOf: Task
Title:       "Completed Physical Activity Program Task"
Description: "This updated Task instance (version 3) represents a completed task for patient Nancy Johansson"
Usage: #example
* insert FulfillTask(Scen2PatientJohansson, "Nancy Johansson", Scen2OrgGoodHealth, "Good Health Cardiology", Scen2OrgFit4Life, "Fit 4 Life", Scen2Servicerequest, completed, 2023-03-16)
* insert TaskOutput(Scen2DiagnosticReport)

Instance: Scen2ReferralFit4LifeResponseBundle
InstanceOf: Bundle
Title:       "Fit4Life ServiceRequest Response Bundle"
Description: "Bundle instance returning ServiceRequest and associated patient"
Usage: #example
* insert SearchBundle(1, [[ServiceRequest?_id=Scen2Servicerequest&_include=ServiceRequest:patient]])
* insert EntryMatch(ServiceRequest, Scen2Servicerequest)
* insert EntryInclude(Patient, Scen2PatientJohansson)

Instance: Scen2TaskEHRResponseBundle1
InstanceOf: Bundle
Title:       "Task response Bundle after acceptance"
Description: "Bundle instance returning accepted Task to EHR"
Usage: #example
* insert SearchBundle(1, [[Task?_id=Scen2TaskFit4LifeV1]])
* insert EntryMatch(Task, Scen2TaskFit4LifeV2)

Instance: Scen2TaskEHRResponseBundle2
InstanceOf: Bundle
Title:       "Task response Bundle after completion"
Description: "Bundle instance returning completed Task to EHR"
Usage: #example
* insert SearchBundle(1, [[Task?_id=Scen2TaskFit4LifeV1]])
* insert EntryMatch(Task, Scen2TaskFit4LifeV3)

Instance: Scen2ConditionResponseBundle
InstanceOf: Bundle
Title:       "Condition Response Bundle"
Description:  "Bundle returning conditions for Patient Johansson"
Usage: #example
* insert SearchBundle(2, [[Condition?patient=Scen2PatientJohansson&category=http:%3A//hl7.org/fhir/us/physical-activity/CodeSystem/PATemporaryCodesorary-codes|PhysicalActivity]])
* insert EntryMatch(Condition, Scen2ConditionLackOfExercise)
* insert EntryMatch(Condition, Scen2ConditionHypertension)

Instance: Scen2ConditionLackOfExercise
InstanceOf: Condition
Title:       "Patient Johansson's Lack of physical exercise Condition"
Description:  "This instance represents Patient Johansson's condition, which is clinically active and confirmed."
Usage: #example
* insert Condition(Scen2PatientJohansson, "Nancy Johansson", Scen2RoleLopez, "Dr. Lopez", $sct#40979000, "Lack of physical exercise", 2022-09-01)

Instance: Scen2ConditionHypertension
InstanceOf: Condition
Title:       "Patient Johansson's Hypertension Condition"
Description:  "This instance represents Patient Johansson's hypertension condition, which is clinically active and confirmed."
Usage: #example
* insert Condition(Scen2PatientJohansson, "Nancy Johansson", http://goodhealth.example.com/fhir/Practitioner/123, "Some other clinician", $sct#38341003, "Hypertension", 2019-06-05)

Instance: Scen2ObservationResponseBundle
InstanceOf: Bundle
Title:       "Bundle returning Physical Activity Observations"
Description:  "This bundle includes Patient Johansson's physical activity observations, including the number of days per week engaged in physical activity and the number of minutes per day spent on physical activity."
Usage: #example
* insert SearchBundle(2, [[Observation?patient=Scen2PatientJohansson&category=http:%3A//hl7.org/fhir/us/physical-activity/CodeSystem/PATemporaryCodesorary-codes|PhysicalActivity]])
* insert EntryMatch(Observation, Scen2ObsDaysPerWeek)
* insert EntryMatch(Observation, Scen2ObsMinutesPerDay)

Instance: Scen2ObsDaysPerWeek
InstanceOf: Observation
Title:       "Weekly Physical Activity Observation"
Description:  "This observation represents the number of days per week that Patient Johansson engages in physical activity."
Usage: #example
* insert DaysPerWeek(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 1)

Instance: Scen2ObsMinutesPerDay
InstanceOf: Observation
Title:       "Daily Physical Activity Observation"
Description:  "This observation represents the number of minutes per day that Patient Johansson engages in physical activity."
Usage: #example
* insert MinPerDay(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 15)

Instance: Scen2Parameters2
InstanceOf: Parameters
Title:       "Notification Parameters for Updated Task"
Description:  "These parameters contain information about the updated task notification, including the associated subscription and the focus task."
Usage: #example
* insert SubParameters(Scen2SubscriptionEhr, Scen2TaskFit4LifeV1)

Instance: Scen2NotificationUpdatedTaskBundle
InstanceOf: Bundle
Title:       "Updated Task Notification Bundle"
Description:  "This bundle contains notifications for updated tasks for Patient Johansson."
Usage: #example
* insert SubNotification(Scen2Parameters2, getFit, 12345)

Instance: Scen2NotificationCompletedTaskBundle
InstanceOf: Bundle
Title:       "Completed Task Notification Bundle"
Description:  "This bundle contains notifications for completed tasks related to physical activity."
Usage: #example
* insert SubNotification(Scen2Parameters3, getFit, 12345)

Instance: Scen2Parameters3
InstanceOf: Parameters
Title:       "Notification Parameters for Completed Task"
Description:  "These parameters contain information about the completed task notification."
Usage: #example
* insert SubParameters(Scen2SubscriptionEhr, Scen2TaskFit4LifeV1)
//Todo - date or count or something?


Instance: Scen2DiagnosticReportObservationsResponseBundle
InstanceOf: Bundle
Title:       "Diagnostic Report with Physical Activity Observations"
Description:  "This bundle contains a diagnostic report and related observations for physical activity."
Usage: #example
* insert SearchBundle(1, [[DiagnosticReport?id=Scen2DiagnosticReport&_include=DiagnosticReport:result]])
* insert EntryMatch(DiagnosticReport, Scen2DiagnosticReport)
* insert EntryInclude(Observation, Scen2ObsDaysPerWeek2)
* insert EntryInclude(Observation, Scen2ObsMinutesPerDay2)
* insert EntryInclude(Observation, Scen2ObsActivityType)
* insert EntryInclude(Observation, Scen2ObsActivityDuration)
* insert EntryInclude(Observation, Scen2ObsActivityMeanHR)
* insert EntryInclude(Observation, Scen2ObsActivityPeakHR)
* insert EntryInclude(Observation, Scen2ObsActivityExperience)
* insert EntryInclude(Observation, Scen2ObsCalories)

Instance: Scen2DiagnosticReport
InstanceOf: DiagnosticReport
Title:       "Physical Activity Consultation Report"
Description:  "A diagnostic report documenting the physical activity consultation for patient Aisha Khatun."
Usage: #example
* insert DiagnosticReport(Scen2PatientJohansson, "Nancy Johansson", Scen2RoleMatthews, "Mr. Matthews", $loinc#11488-4, "Consult note", Scen2Servicerequest, 2023-03-16, 2023-05-16, "")
* result[+] = Reference(Scen2ObsDaysPerWeek2)
* result[+] = Reference(Scen2ObsMinutesPerDay2)
* result[+] = Reference(Scen2ObsActivityType)
* result[+] = Reference(Scen2ObsActivityDuration)
* result[+] = Reference(Scen2ObsActivityMeanHR)
* result[+] = Reference(Scen2ObsActivityPeakHR)
* result[+] = Reference(Scen2ObsActivityExperience)
* result[+] = Reference(Scen2ObsCalories)

Instance: Scen2ObsDaysPerWeek2
InstanceOf: Observation
Title:       "Weekly Physical Activity Days"
Description:  "The number of days per week the patient engages in physical activity."
Usage: #example
* insert DaysPerWeek(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 5)

Instance: Scen2ObsMinutesPerDay2
InstanceOf: Observation
Title:       "Daily Physical Activity Duration"
Description:  "The duration of physical activity in minutes per day for the patient."
Usage: #example
* insert MinPerDay(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 20)

Instance: Scen2ObsActivityGroup
InstanceOf: Observation
Title:       "Collection of physical activity details"
Description:  "A grouping of observations associated with a single physical activity"
Usage: #example
* insert ActivityGroup(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15)
* insert HasMember(Scen2ObsActivityType)
* insert HasMember(Scen2ObsActivityDuration)
* insert HasMember(Scen2ObsActivityMeanHR)
* insert HasMember(Scen2ObsActivityPeakHR)
* insert HasMember(Scen2ObsActivityExperience)

Instance: Scen2ObsActivityType
InstanceOf: Observation
Title:       "Activity Type"
Description:  "Indicates that the specific activity was a run"
Usage: #example
* insert ActivityType(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, LA11836-6, "Running")

Instance: Scen2ObsActivityDuration
InstanceOf: Observation
Title:       "Activity Duration"
Description:  "The length of a period of physical activity."
Usage: #example
* insert ActivityDuration(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 30)

Instance: Scen2ObsActivityMeanHR
InstanceOf: Observation
Title:       "Average Heart Rate during Activity"
Description:  "The average heart rate achieved by the patient during physical activity."
Usage: #example
* insert MeanHeartRate(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 132)

Instance: Scen2ObsActivityPeakHR
InstanceOf: Observation
Title:       "Maximum heart rate during activity"
Description:  "The maximum heart rate achieved by the patient during physical activity."
Usage: #example
* insert PeakHeartRate(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 177)

Instance: Scen2ObsActivityExperience
InstanceOf: Observation
Title:       "Patient's experience of activity"
Description:  "The amount of pleasure/displeasure the patient experienced during the run."
Usage: #example
* insert ActivityExperience(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 3, "Good")

Instance: Scen2ObsCalories
InstanceOf: Observation
Title:       "Calories Burned in 24 hours"
Description:  "The number of calories burned by the patient through physical activity in a 24-hour period."
Usage: #example
* insert DailyCalories(Scen2PatientJohansson, "Nancy Johansson", 2023-03-15, 500)

// Participants
Instance: Scen2PatientJohansson
InstanceOf: Patient
Title:       "Patient Johansson"
Description:  "Patient instance represents Nancy Johansson"
Usage: #example
* identifier
  * use = #usual
  * type = $v2-0203#MR "Medical record number"
    * text = "Medical record number"
  * system = "http://ehr.example.org/identifiers/mrn"
  * value = "123456"
* active = true
* name
  * use = #official
  * family = "Johansson"
  * given = "Nancy"
* telecom[+]
  * system = #phone
  * value = "+1 (555) 555-5555"
  * use = #home
* telecom[+]
  * system = #email
  * value = "nancy.johansson@example.com"
  * use = #home
* gender = #male
* birthDate = "1960-05-15"
* address
  * use = #home
  * line = "123 Main St"
  * city = "Springfield"
  * state = "IL"
  * postalCode = "62701"
  * country = "USA"

Instance: Scen2OrgGoodHealth
InstanceOf: Organization
Title:       "Good Health Cardiology"
Description:  "An example cardiology clinic."
Usage: #example
* identifier
  * system = "http://example.com/identifier"
  * value = "87654"
//Todo NPI
* active = true
* name = "Good Health Cardiology"

Instance: Scen2OrgFit4Life
InstanceOf: Organization
Title:       "Fit 4 Life"
Description:  "A specialty exercise clinic named Fit 4 Life."
Usage: #example
* identifier
  * system = "http://example.com/identifier"
  * value = "65432"
//Todo NPI
* active = true
* name = "Fit 4 Life"

Instance: Scen2OrgGetFitTraining
InstanceOf: Organization
Title:       "Get Fit Training"
Description:  "A fitness center named Get Fit Training."
Usage: #example
* identifier
  * system = "http://example.com/identifier"
  * value = "54321"
//Todo NPI
* active = true
* name = "Get Fit Training"

Instance: Scen2PractitionerLopez
InstanceOf: Practitioner
Title:       "Practitioner - John Lopez"
Description:  "Profile of Dr. Lopez."
Usage: #example
// TODO - Add NPI number
* name
  * family = "Lopez"
  * given = "John"

Instance: Scen2RoleLopez
InstanceOf: PractitionerRole
Title:       "PractitionerRole - John Lopez"
Description:  "Role of Dr. Lopez who serves as a cardiologist at the Good Health Cardiology organization."
Usage: #example
* practitioner = Reference(Scen2PractitionerLopez)
* code = $sct#17561000 "Cardiologist"
* organization = Reference(Scen2OrgGoodHealth) "Good Health Cardiology"

Instance: Scen2RoleWang
InstanceOf: PractitionerRole
Title:       "Role - Wang"
Description:  "Mrs. Kim Wang is a personal trainer working for Get Fit Training."
Usage: #example
* active = true
* practitioner = Reference(Scen2PractitionerWang) "Mrs. Wang"
* organization = Reference(Scen2OrgGetFitTraining) "Get Fit Training"
* code = $sct#228239008 "Trainers"

Instance: Scen2PractitionerWang
InstanceOf: Practitioner
Title:       "Practitioner Kim Wang"
Description:  "Mrs. Kim Wang is a qualified personal trainer at Get Fit Training."
Usage: #example
* identifier
  * system = "http://example.com/identifier"
  * value = "78903"
// TODO: Change this to an NPI
* active = true
* name
  * use = #official
  * family = "Wang"
  * given = "Kim"
* qualification
  * identifier
    * system = "http://registry.example.org/practitionerLicenseNumber"
    * value = "12347"
  * code = $sct#228239008 "Trainers"
  * period.start = "2000-01-01"
  * issuer = Reference(Scen2OrgGetFitTraining) "Get Fit Training"


Instance: Scen2RoleMatthews
InstanceOf: PractitionerRole
Title:       "Trainer Role for Mr. Matthews"
Description:  "Role of Mr. Matthews who serves as a personal trainer at the Fit 4 Life organization."
Usage: #example
* active = true
* practitioner = Reference(Scen2PractitionerMatthews) "Mr. Matthews"
* organization = Reference(Scen2OrgFit4Life) "Fit 4 Life"
* code = $sct#228239008 "Trainers"

Instance: Scen2PractitionerMatthews
InstanceOf: Practitioner
Title:       "Practitioner - Daniel Matthews"
Description:  "Profile of Mr. Daniel Matthews who serves as a personal trainer at the Fit 4 Life organization."
Usage: #example
* identifier
  * system = "http://example.com/identifier"
  * value = "78904"
// TODO: Change this to an NPI
* active = true
* name
  * use = #official
  * family = "Matthews"
  * given = "Daniel"
* qualification
  * identifier
    * system = "http://registry.example.org/practitionerLicenseNumber"
    * value = "12348"
  * code = $sct#228239008 "Trainers"
  * period.start = "2000-01-01"
  * issuer = Reference(Scen2OrgFit4Life) "Fit 4 Life"

